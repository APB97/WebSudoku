@page "/printMultiple"

@using System.Globalization
@using apb97.github.io.WebSudoku.Shared
@using apb97.github.io.WebSudoku.Shared.General
@using apb97.github.io.WebSudoku.Shared.Sudoku

@implements IAsyncDisposable

@inject CountingSolver Solver
@inject Blanker Blanker
@inject Validator Validator
@inject IJSRuntime JS
@inject StringLocalizer<PrintMultiple> Loc

@if (ShouldRender())
{
    <PageTitle>Web Sudoku - @Loc["print multiple"]</PageTitle>

    <div class="d-print-none">
        <button class="btn btn-danger" @onclick="boards.Clear">@Loc["Clear all"]</button>
        <label for="width">@Loc["Board width"] [%]</label>
        <InputSelect id="width" TValue="float" Value="boardWidthPercentage" ValueExpression="() => boardWidthPercentage" ValueChanged="UpdateBoardWidth">
            <option value="33.3333">33%</option>
            <option value="50">50%</option>
            <option value="100">100%</option>
        </InputSelect>
        <label for="boards-amount">@Loc["Boards to generate"]</label>
        <InputNumber id="boards-amount" min="1" max="32" @bind-Value="boardsToGenerate" />
        <button disabled="@(generating ? "disabled" : null)" class="btn btn-primary" @onclick="GenerateBoards">@Loc["Add"] @boardsToGenerate @Loc["sudoku(s)"]</button>
        <button class="btn btn-secondary" onclick="print()">@Loc["Print"]</button>
    </div>

    @if (generating)
    {
        <div class="border border-2 border-info">@Loc["Generating additional sudokus..."]</div>
    }

    <div class="d-flex flex-wrap">
        @foreach (var board in boards)
        {
            <div class="p-2" style="break-inside: avoid-page; width: @boardWidthPercentage.ToString(CultureInfo.InvariantCulture)%;">
                <table class="sudoku-table" style="border-spacing: 0px;">
                    @for (int r = 0; r < Board.BoardSize; r++)
                    {
                        <tr>
                            @for (int c = 0; c < Board.BoardSize; c++)
                            {
                                // these local variable is here to cache value of Cell on the board
                                var value = board.GetValueAt((r, c));
                                <td>
                                    <Cell ReadOnly="true" HighlightClass="@null"
                                        Value="@(value != 0 ? value.ToString() : string.Empty)"
                                        SwitchTypeOnFocus="false"
                                        />
                                </td>
                            }
                        </tr>
                    }
                </table>
                <div class="d-print-none">
                    <button class="btn btn-danger" @onclick="() => boards.Remove(board)">@Loc["Remove board"]</button>
                    <button class="btn btn-success" disabled="@(generating ? "disabled" : null)" @onclick="() => Regenerate(board)">@Loc["Regenerate board"]</button>
                </div>
            </div>
        }
    </div>
}

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    private List<Board> boards = [];

    private bool generating;

    private float boardWidthPercentage = 100;

    private int boardsToGenerate = 4;

    private IJSObjectReference? utilities;

    protected override bool ShouldRender()
    {
        return Loc.IsReady;
    }

    protected override async Task OnInitializedAsync()
    {
        Layout.OnStateChanging += LoadResourcesAsync;
        await Loc.InitializeAsync(Layout.Culture);
        utilities = await JS.ImportAsync(JSModules.UtilitiesModule);
        var setting = await utilities.GetSettingAsync<string>("printMultiple_boardWidthPercentage");
        if (!float.TryParse(setting, CultureInfo.InvariantCulture, out var result)) return;
        boardWidthPercentage = result;
    }

    private async Task UpdateBoardWidth(float width)
    {
        boardWidthPercentage = width;
        if (utilities is null) return;
        await utilities.SetSettingAsync("printMultiple_boardWidthPercentage", width);
    }

    private Task GenerateBoards() => GenerateBoards(boardsToGenerate);

    private async Task GenerateBoards(int amount)
    {
        generating = true;
        await Task.Run(async () =>
        {
            try
            {
                for (int i = 0; i < amount; i++)
                {
                    generating = true;
                    boards.Add(new Board(Solver, new RandomOptionOrder<int>(), Blanker, 40, 64));
                }
            }
            catch (Exception ex)
            {
                if (utilities is not null)
                {
                    await utilities.AlertAsync(ex.Message);
                }
            }
            finally
            {
                generating = false;
            }
            StateHasChanged();
        });
    }

    private async Task Regenerate(Board board)
    {
        if (generating) return;
        var index = boards.FindIndex(b => b == board);
        if (index < 0) return;

        try
        {
            generating = true;
            boards[index] = new Board(Solver, new RandomOptionOrder<int>(), Blanker, 40, 64);
        }
        catch (Exception ex)
        {
            if (utilities is not null)
            {
                await utilities.AlertAsync(ex.Message);
            }
        }
        finally
        {
            generating = false;
        }
    }

    private async Task LoadResourcesAsync()
    {
        await Loc.InitializeAsync(Layout.Culture);
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        Layout.OnStateChanging -= LoadResourcesAsync;
        if (utilities is null) return;
        await utilities.DisposeAsync();
    }
}
