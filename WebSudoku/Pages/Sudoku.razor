@page "/sudoku"
@using System.Linq
@using WebSudoku.Shared
@using WebSudoku.Shared.General
@using WebSudoku.Shared.Serialization
@using WebSudoku.Shared.Sudoku

@inject CountingSolver Solver
@inject Blanker Blanker
@inject Validator Validator
@inject NavigationManager Navigation
@inject IJSRuntime JS

@implements IAsyncDisposable

<PageTitle>Web Sudoku - sudoku</PageTitle>

@if (!success)
{
    <div class="d-flex flex-direction-var">
        <div class="div-main">
            <TimerDisplay @ref="timer" />
            <table class="sudoku-table" style="border-spacing: 0px;">
                @for (int r = 0; r < Board.BoardSize; r++)
                {
                    <tr>
                        @for (int c = 0; c < Board.BoardSize; c++)
                        {
                            // these local variables are needed to cache position of Cell on the board
                            int row = r, column = c;
                            var value = board.GetValueAt((row, column));
                            string cellValue = value != 0 ? value.ToString() : string.Empty;
                            <td>
                                <Cell @ref="cells[row, column]" ReadOnly="board.IsPredefined((row, column))" HighlightClass="@(InvalidCells.Any(c => c.Row == row && c.Column == column) ? "error-highlight" : null)"
                                    Value="@cellValue"
                                    OnKeyDown="k => HandleKeyDown(k, row + 1, column + 1, cells[row, column])"
                                    SwitchTypeOnFocus="isMobile"
                                    DefaultType="@(isFirefox && isMobile ? Cell.InputTypeNumber : Cell.InputTypeText)"
                                    />
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    
        <div class="div-options hide-in-print">
            <button class="btn btn-primary" @onclick="Save">Save</button>
            <button class="btn btn-primary" @onclick="Load">Load</button>
            <button class="btn btn-purple" onclick="print()">Print</button>
            <PrintSettings />
        </div>
    </div>
}
else
{
    <h1>Success</h1>
    @if (timePassed.HasValue)
    {
        <p>You finished with time @timePassed.</p>
    }
    <button class="btn btn-primary" @onclick="CreateNewBoard">Play again</button>
}

@code {
    private Board board = new Board();
    private const string SudokuStateKey = "sudokuState";
    private const string TimerStateKey = "timerState";
    private const int TargetBlanks = 35;
    private const int AttemptsToRemove = 4;

    private bool success = false;

    private TimeSpan? timePassed;

    private List<CellPosition> InvalidCells = new List<CellPosition>();

    private TimerDisplay? timer;

    private LocalStorage? localStorage;

    private IJSObjectReference? module;

    private bool isMobile;

    private bool isFirefox;

    private Cell[,] cells = new Cell[Board.BoardSize, Board.BoardSize];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        localStorage = new LocalStorage(JS);
        module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Sudoku.razor.js");
        if (module != null)
        {
            try
            {
                isMobile = await module.InvokeAsync<bool>("isMobile");
                isFirefox = await module.InvokeAsync<bool>("isFirefox");
            }
            catch
            {
                isMobile = false;
                isFirefox = false;
            }
        }

        CreateNewBoard();
    }

    private async Task Save()
    {
        if (localStorage == null) return;

        await localStorage.SetItem(SudokuStateKey, BoardSerializer.SerializeToJson(board, timer?.SpanToShow, GameStateVersion.Current));
    }

    private async Task Load()
    {
        if (localStorage == null) return;

        var jsonState = await localStorage.GetItem(SudokuStateKey);
        if (jsonState != null)
        {
            // Load V2 save
            var loadedBoard = BoardSerializer.DeserializeFromJson(jsonState, out var loadedTimer);
            if (loadedBoard != null && loadedTimer.HasValue)
            {
                board = loadedBoard;
                timer?.SetTime(loadedTimer.Value);
                InvalidCells = board.GetInvalidCells(Validator);
            }
            else
            {
                // Load V1 save
                var v1board = BoardSerializer.DeserializeFromJson(jsonState);
                if (v1board != null)
                {
                    board = v1board;
                    InvalidCells = board.GetInvalidCells(Validator);
                }

                var jsonTimer = await localStorage.GetItem(TimerStateKey);
                if (timer != null && jsonTimer != null && TimeSpan.TryParse(jsonTimer, out var loadedTimerOnly))
                {
                    timer.SetTime(loadedTimerOnly);
                }
            }
        }
    }

    protected void CreateNewBoard()
    {
        success = false;
        board = new Board(Solver, new RandomOptionOrder<int>(), Blanker, TargetBlanks, AttemptsToRemove);
    }

    private async Task HandleKeyDown(KeyboardEventArgs args, int row, int column, Cell currentCell)
    {
        if (args.AltKey || args.ShiftKey || args.MetaKey || args.CtrlKey) return;
        switch (args.Code)
        {
            case KeyCodes.ArrowLeft:
                await BlurAsync(row, column);
                await FocusAsync(row, column == 1 ? 9 : column - 1);
                return;
            case KeyCodes.ArrowRight:
                await BlurAsync(row, column);
                await FocusAsync(row, column == 9 ? 1 : column + 1);
                return;
            case KeyCodes.ArrowUp:
                await BlurAsync(row, column);
                await FocusAsync(row == 1 ? 9 : row - 1, column);
                return;
            case KeyCodes.ArrowDown:
                await BlurAsync(row, column);
                await FocusAsync(row == 9 ? 1 : row + 1, column);
                return;
            case KeyCodes.CapsLock:
            case KeyCodes.Tab:
            case KeyCodes.Enter:
            case KeyCodes.Backspace:
            case KeyCodes.Delete:
                return;
        }

        if (board.IsPredefined((row - 1, column - 1))) return;

        if (int.TryParse(args.Key, out var number) && number >= 1 && number <= 9)
        {
            UpdateCellAsync(row, column, currentCell, number);
            CheckForWinCondition();
        }
        else
        {
            await currentCell.SetParametersAsync(ParameterView.FromDictionary(new Dictionary<string, object?> { { nameof(currentCell.Value), string.Empty } }));
            board.ClearCell((row - 1, column - 1));
            InvalidCells.Remove((row - 1, column - 1));
            InvalidCells.RemoveAll(cell => Validator.IsValid(board, cell));
        }
    }

    private void UpdateCellAsync(int row, int column, Cell currentCell, int number)
    {
        board.FillCell((row - 1, column - 1), number);
        currentCell.OnChange(number.ToString());
        InvalidCells = board.GetInvalidCells(Validator);
    }

    private void CheckForWinCondition()
    {
        if (board.EmptyCells.Count == 0 && Validator.IsValidBoard(board))
        {
            success = true;
            timePassed = timer?.SpanToShow;
        }
    }

    private async Task FocusAsync(int row, int column)
    {
        if (module is null) return;
        await module.InvokeVoidAsync("focusCell", row, column);
    }

    private async Task BlurAsync(int row, int column)
    {
        if (module is null) return;
        await module.InvokeVoidAsync("blurCell", row, column);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is null) return;
        await module.DisposeAsync();
    }
}
