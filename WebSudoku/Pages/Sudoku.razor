@page "/sudoku"
@using System.Linq
@using apb97.github.io.WebSudoku.Services.KeyDownHandling
@using apb97.github.io.WebSudoku.Shared
@using apb97.github.io.WebSudoku.Shared.General
@using apb97.github.io.WebSudoku.Shared.Serialization
@using apb97.github.io.WebSudoku.Shared.Sudoku

@inject CountingSolver Solver
@inject Blanker Blanker
@inject Validator SudokuValidator
@inject IJSRuntime JS
@inject StringLocalizer<Sudoku> Loc

@implements IAsyncDisposable

<SettingsProvider @ref="settingsProvider" />

<PageTitle>Web Sudoku - sudoku</PageTitle>

@if (ShouldRender())
{
    @if (!success)
    {
        if (!generated)
        {
            Task.CompletedTask.ContinueWith(t => CreateNewBoard()).ContinueWith(t => generated = true);
        }
        <div class="d-flex flex-direction-var">
            <div class="div-main">
                <TimerDisplay @ref="timer" />
                <SudokuBoard @ref="sudokuBoard"
                    CellDefaultType="@CellDefaultType"
                    OnWinCondition="OnWinCondition"
                    SwitchTypeOnFocus="isMobile"
                    SudokuModule="module" />
            </div>
    
            @SudokuOptionsFragment
        </div>
    }
    else
    {
        @SudokuFinishedFragment
    }
}

@code {
    [CascadingParameter]
    public required MainLayout Layout { get; set; }

    private SudokuBoard? sudokuBoard;

    private const string SudokuStateKey = "sudokuState";
    private const string TimerStateKey = "timerState";

    private int targetBlanks = 35;
    private int attemptsToRemove = 4;

    private bool success = false;
    private bool generated = false;

    private TimeSpan? timePassed;

    private TimerDisplay? timer;

    private IJSObjectReference? module;
    private IJSObjectReference? utilitiesModule;

    private bool isMobile;
    private bool isFirefox;
    private string CellDefaultType = Cell.InputTypeText;

    private string? lastSavedState;

    private string StatusMessage = string.Empty;

    private CancellationTokenSource cts = new();

    private SettingsProvider? settingsProvider;

    private RenderFragment SudokuOptionsFragment => __builder =>
    {
        <div class="div-options d-print-none">
            <button class="btn btn-primary" @onclick="Save">@Loc["Save"]</button>
            <button class="btn btn-primary" @onclick="Load"
                    title="@(string.IsNullOrEmpty(lastSavedState) ? Loc["Previous save not found"] : null)"
                    disabled="@(string.IsNullOrEmpty(lastSavedState) ? "disabled" : null)">
                @Loc["Load"]
            </button>
            <button class="btn btn-purple" onclick="print()">@Loc["Print"]</button>
            <PrintSettings />

            <span class="alert alert-info position-sticky sticky-bottom-portrait @(string.IsNullOrEmpty(StatusMessage) ? "d-none" : null)"
                role="status">@StatusMessage</span>
        </div>
    };

    private RenderFragment SudokuFinishedFragment => __builder =>
    {
        <h1>@Loc["Success"]</h1>
        @if (timePassed.HasValue)
        {
            <p>@Loc["You finished with time"] @timePassed.</p>
        }
        <button class="btn btn-primary" @onclick="() => success = false">@Loc["Play again"]</button>
    };

    protected override bool ShouldRender()
    {
        return Loc.IsReady;
    }

    protected override async Task OnInitializedAsync()
    {
        Layout.OnStateChanging += LoadResourcesAsync;
        await Loc.InitializeAsync(Layout.Culture);
        module = await JS.ImportAsync("./Pages/Sudoku.razor.js");
        if (module is not null)
        {
            try
            {
                isMobile = await module.InvokeAsync<bool>("isMobile");
                isFirefox = await module.InvokeAsync<bool>("isFirefox");
            }
            catch
            {
                isMobile = false;
                isFirefox = false;
            }
        }
        CellDefaultType = isMobile && isFirefox ? Cell.InputTypeNumber : Cell.InputTypeText;

        utilitiesModule = await JS.ImportAsync(JSModules.UtilitiesModule);
        await FetchSavedState();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        if (settingsProvider is null) return;
        settingsProvider.AfterSettingsLoaded += OnAfterSettingsLoaded;
    }

    private void OnAfterSettingsLoaded()
    {
        if(settingsProvider is not null)
        {
            targetBlanks = settingsProvider.GetInt(SettingsProvider.DesiredBlankCells);
            attemptsToRemove = settingsProvider.GetInt(SettingsProvider.CellBlankingAttempts);
        }
    }

    private async ValueTask FetchSavedState()
    {
        if (utilitiesModule is null) return;
        lastSavedState = await utilitiesModule.GetSettingAsync<string>(SudokuStateKey);
    }

    private async Task Save()
    {
        if (utilitiesModule is null) return;
        if (sudokuBoard is null) return;

        string savedState = BoardSerializer.SerializeToJson(sudokuBoard.Board, timer?.SpanToShow, GameStateVersion.Current);
        await utilitiesModule.SetSettingAsync(SudokuStateKey, savedState);
        lastSavedState = savedState;
        await SetStatusMessage("Saved");
    }

    private Task SetStatusMessage(string messageKey)
    {
        CancelMessageClear();
        StatusMessage = Loc[messageKey];
        return Task.Delay(TimeSpan.FromSeconds(4), cts.Token).ContinueWith(t =>
        {
            if (t.IsCanceled) return;
            StatusMessage = string.Empty;
        });
    }

    private void CancelMessageClear()
    {
        cts?.Cancel();
        cts?.Dispose();
        cts = new();
    }

    private async Task Load()
    {
        if (utilitiesModule == null) return;

        lastSavedState ??= await utilitiesModule.GetSettingAsync<string>(SudokuStateKey);
        if (await LoadV2()) return;
        await LoadV1();
    }

    private async Task<bool> LoadV2()
    {
        if (lastSavedState is null) return false;
        if (sudokuBoard is null) return false;
        var loadedBoard = BoardSerializer.DeserializeFromJson(lastSavedState, out var loadedTimer);
        if (loadedBoard == null || !loadedTimer.HasValue) return false;

        sudokuBoard.Board = loadedBoard;
        timer?.SetTime(loadedTimer.Value);
        await SetStatusMessage("Loaded");
        return true;
    }

    private async Task<bool> LoadV1()
    {
        if (lastSavedState is null) return false;
        if (utilitiesModule is null) return false;
        if (sudokuBoard is null) return false;
        var v1board = BoardSerializer.DeserializeFromJson(lastSavedState);
        var jsonTimer = await utilitiesModule.GetSettingAsync<string>(TimerStateKey);
        if (v1board == null || timer == null || jsonTimer == null || !TimeSpan.TryParse(jsonTimer, out var loadedTimerOnly))
            return false;

        sudokuBoard.Board = v1board;
        timer.SetTime(loadedTimerOnly);
        await SetStatusMessage("Loaded");
        return true;
    }

    protected async Task CreateNewBoard()
    {
        while (sudokuBoard is null) await Task.Delay(25);
        if (generated) return;
        lock (this)
        {
            success = false;
            generated = true;
            sudokuBoard.GenerateNew(targetBlanks, attemptsToRemove);
        }
    }

    private void OnWinCondition()
    {
        success = true;
        generated = false;
        timePassed = timer?.SpanToShow;
        StateHasChanged();
    }

    private async Task LoadResourcesAsync()
    {
        await Loc.InitializeAsync(Layout.Culture);
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        Layout.OnStateChanging -= LoadResourcesAsync;
        cts?.Dispose();
        if (settingsProvider is not null)
            settingsProvider.AfterSettingsLoaded -= OnAfterSettingsLoaded;
        if (module is null) return;
        await module.DisposeAsync();
    }
}
