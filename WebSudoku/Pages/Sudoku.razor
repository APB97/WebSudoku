@page "/sudoku"
@using System.Linq
@using WebSudoku.Shared
@using WebSudoku.Shared.General
@using WebSudoku.Shared.Sudoku

@inject CountingSolver Solver
@inject Blanker Blanker
@inject Validator Validator
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>WebSudoku - sudoku</PageTitle>

@if (board == null)
{
    <p><em>Loading...</em></p>
}
else if (!success)
{
    <button class="btn btn-secondary" @onclick="() => InvalidCells = board.GetInvalidCells(Validator)">Show invalid cells</button>
    <TimerDisplay @ref="timer" />
    <table class="sudoku-table" style="border-spacing: 0px; background-color: black;">
        @for (int r = 0; r < 9; r++)
        {
            <tr>
            @for (int c = 0; c < 9; c++)
            {
                int row = r, column = c;
                string borderRight = string.Empty;
                string borderBottom = string.Empty;
                string cellValue = string.Empty;
                if (column == 2 || column == 5)
                {
                    borderRight = "border-right";
                }
                if (row == 2 || row == 5)
                {
                    borderBottom = "border-bot";
                }
                var value = board.GetValueAt((row, column));
                if (value != 0)
                {
                    cellValue = value.ToString();
                }
                <td class="@borderRight @borderBottom">
                    <Cell ReadOnly="board.IsPredefined((row, column))" HighlightColor="@(InvalidCells.Any(c => c.Row == row && c.Column == column) ? "rgb(255, 95, 95)" : null)"
                        Value="@cellValue" OnValueChanged="(args) => OnCellChanged(row, column, args)" />
                </td>
            }
            </tr>
        }
</table>
}
else
{
    <h1>Success</h1>
    @if (timePassed.HasValue)
    {
        <p>You finished with time @timePassed.</p>
    }
    <button class="btn btn-primary" @onclick="CreateNewBoard">Play again</button>
}

@code {
    private Board board = new Board();

    private bool success = false;

    private TimeSpan? timePassed;

    private List<CellPosition> InvalidCells = new List<CellPosition>();

    private TimerDisplay? timer;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        CreateNewBoard();
    }

    protected void CreateNewBoard()
    {
        success = false;
        board = new Board(Solver, new RandomOptionOrder<int>(), Blanker, 35);
    }

    protected void OnCellChanged(int row, int column, ChangeEventArgs args)
    {
        InvalidCells.Remove((row, column));

        if (args.Value is null)
        {
            board.ClearCell((row, column));
        }
        else if (args.Value is int number)
        {
            board.FillCell((row, column), number);
        }

        if (board.EmptyCells.Count == 0 && Validator.IsValidBoard(board))
        {
            success = true;
            timePassed = timer?.SpanToShow;
        }
    }
}
