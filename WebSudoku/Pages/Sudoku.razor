@page "/sudoku"
@using System.Linq
@using WebSudoku.Shared
@using WebSudoku.Shared.General
@using WebSudoku.Shared.Sudoku

@inject CountingSolver Solver
@inject Blanker Blanker
@inject Validator Validator
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>WebSudoku - sudoku</PageTitle>

@if (!success)
{
    <div class="d-flex flex-direction-var">
        <div class="div-main">
            <TimerDisplay @ref="timer" />
            <table class="sudoku-table" style="border-spacing: 0px;">
                @for (int r = 0; r < 9; r++)
                {
                    <tr>
                    @for (int c = 0; c < 9; c++)
                    {
                        int row = r, column = c;
                        var value = board.GetValueAt((row, column));
                        string cellValue = value != 0 ? value.ToString() : string.Empty;
                        <td>
                            <Cell ReadOnly="board.IsPredefined((row, column))" HighlightColor="@(InvalidCells.Any(c => c.Row == row && c.Column == column) ? "rgb(255, 95, 95)" : null)"
                                Value="@cellValue" OnValueChanged="(args) => OnCellChanged(row, column, args)"
                                OnKeyDown="k => HandleKeyDown(k, row + 1, column + 1)" />
                        </td>
                    }
                    </tr>
                }
            </table>
        </div>
    
        <div class="div-options hide-in-print" style="padding: 4px;">
            <button class="btn btn-secondary" @onclick="() => InvalidCells = board.GetInvalidCells(Validator)">Show invalid cells</button>
            <button class="btn btn-purple" onclick="print()">Print</button>
            <button class="btn btn-primary" @onclick="() => showPrintSettings = !showPrintSettings">@(showPrintSettings ? "Hide" : "Show") print settings</button>

            @if (showPrintSettings)
            {
                <p><b>Print settings</b></p>

                <InputCheckbox @bind-Value="printFilledValues"></InputCheckbox>
                <label @onclick="() => printFilledValues = !printFilledValues" class="user-select-none">Print filled values</label>

                <br />
                @if (printFilledValues)
                {
                    <InputCheckbox @bind-Value="printHighlightedErrors"></InputCheckbox>
                    <label @onclick="() => printHighlightedErrors = !printHighlightedErrors" class="user-select-none">Print highlighted errors</label>
                }
            }
        </div>
    </div>

    <HeadContent>
        <style>
            @if (printHighlightedErrors == false || printFilledValues == false)
            {
                <text>
                @@media print {
                    .sudoku-input-var.input-editable {
                        background-color: white !important;
                    }
                }
                </text>
            }
            @if (printFilledValues == false)
            {
                <text>
                @@media print {
                    .sudoku-input-var.input-editable {
                        color: transparent !important;
                    }
                }
                </text>
            }
        </style>
    </HeadContent>
}
else
{
    <h1>Success</h1>
    @if (timePassed.HasValue)
    {
        <p>You finished with time @timePassed.</p>
    }
    <button class="btn btn-primary" @onclick="CreateNewBoard">Play again</button>
}

@code {
    private Board board = new Board();

    private bool success = false;

    private TimeSpan? timePassed;

    private List<CellPosition> InvalidCells = new List<CellPosition>();

    private TimerDisplay? timer;

    private bool showPrintSettings;

    private bool printHighlightedErrors;

    private bool printFilledValues;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        CreateNewBoard();
    }

    protected void CreateNewBoard()
    {
        success = false;
        board = new Board(Solver, new RandomOptionOrder<int>(), Blanker, 35);
    }

    protected void OnCellChanged(int row, int column, ChangeEventArgs args)
    {
        InvalidCells.Remove((row, column));

        if (args.Value is null)
        {
            board.ClearCell((row, column));
        }
        else if (args.Value is int number)
        {
            board.FillCell((row, column), number);
        }

        if (board.EmptyCells.Count == 0 && Validator.IsValidBoard(board))
        {
            success = true;
            timePassed = timer?.SpanToShow;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args, int row, int column)
    {
        switch (args.Code)
        {
            case KeyCodes.ArrowLeft:
                await Focus(row, column == 1 ? 9 : column - 1);
                break;
            case KeyCodes.ArrowRight:
                await Focus(row, column == 9 ? 1 : column + 1);
                break;
            case KeyCodes.ArrowUp:
                await Focus(row == 1 ? 9 : row - 1, column);
                break;
            case KeyCodes.ArrowDown:
                await Focus(row == 9 ? 1 : row + 1, column);
                break;
        }
    }

    private async Task Focus(int row, int column)
    {
        await JS.InvokeVoidAsync("focusCell", row, column);
    }
}
