@page "/sudoku"
@using System.Linq
@using RangeAttribute = System.ComponentModel.DataAnnotations.RangeAttribute
@using apb97.github.io.WebSudoku.Shared
@using apb97.github.io.WebSudoku.Shared.General
@using apb97.github.io.WebSudoku.Shared.Serialization
@using apb97.github.io.WebSudoku.Shared.Sudoku

@inject CountingSolver Solver
@inject Blanker Blanker
@inject Validator Validator
@inject IJSRuntime JS
@inject StringLocalizer<Sudoku> Localization

@implements IAsyncDisposable

<PageTitle>Web Sudoku - sudoku</PageTitle>

@if (ShouldRender())
{
    @if (!success)
    {
        <div class="d-flex flex-direction-var">
            <div class="div-main">
                <TimerDisplay @ref="timer" />
                <table class="sudoku-table" style="border-spacing: 0px;">
                    @for (int r = 0; r < Board.BoardSize; r++)
                    {
                        <tr>
                            @for (int c = 0; c < Board.BoardSize; c++)
                            {
                                // these local variables are needed to cache position of Cell on the board
                                int row = r, column = c;
                                var value = board.GetValueAt((row, column));
                                string cellValue = value != 0 ? value.ToString() : string.Empty;
                                <td>
                                    <Cell @ref="cells[row, column]" ReadOnly="board.IsPredefined((row, column))" HighlightClass="@(InvalidCells.Any(c => c.Row == row && c.Column == column) ? "error-highlight" : null)"
                                        Value="@cellValue"
                                        OnKeyDown="k => HandleKeyDown(k, row + 1, column + 1)"
                                        SwitchTypeOnFocus="isMobile"
                                        DefaultType="@(isFirefox && isMobile ? Cell.InputTypeNumber : Cell.InputTypeText)"
                                        />
                                </td>
                            }
                        </tr>
                    }
                </table>
            </div>
    
            <div class="div-options d-print-none">
                <button class="btn btn-primary" @onclick="Save">@Localization.Localize("Save")</button>
                <button class="btn btn-primary" @onclick="Load">@Localization.Localize("Load")</button>
                <button class="btn btn-purple" onclick="print()">@Localization.Localize("Print")</button>
                <PrintSettings />
            </div>
        </div>
    }
    else
    {
        <h1>@Localization.Localize("Success")</h1>
        @if (timePassed.HasValue)
        {
            <p>@Localization.Localize("You finished with time") @timePassed.</p>
        }
        <button class="btn btn-primary" @onclick="CreateNewBoard">@Localization.Localize("Play again")</button>
    }
}

@code {
    private Board board = new Board();
    private const string SudokuStateKey = "sudokuState";
    private const string TimerStateKey = "timerState";
    private const int TargetBlanks = 35;
    private const int AttemptsToRemove = 4;

    private bool success = false;

    private TimeSpan? timePassed;

    private List<CellPosition> InvalidCells = new List<CellPosition>();

    private TimerDisplay? timer;

    private IJSObjectReference? module;
    private IJSObjectReference? utilitiesModule;

    private bool isMobile;

    private bool isFirefox;

    private Cell[,] cells = new Cell[Board.BoardSize, Board.BoardSize];

    protected override bool ShouldRender()
    {
        return Localization.IsReady;
    }

    protected override async Task OnInitializedAsync()
    {
        MainLayout.OnStateChanging += LoadResourcesAsync;
        await Localization.InitializeAsync(LanguageSelect.Culture);
        module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Sudoku.razor.js");
        if (module != null)
        {
            try
            {
                isMobile = await module.InvokeAsync<bool>("isMobile");
                isFirefox = await module.InvokeAsync<bool>("isFirefox");
            }
            catch
            {
                isMobile = false;
                isFirefox = false;
            }
        }

        utilitiesModule = await JS.InvokeAsync<IJSObjectReference>("import", JSModules.UtilitiesModule);

        CreateNewBoard();
    }

    private async Task Save()
    {
        if (utilitiesModule == null) return;

        await utilitiesModule.SetSettingAsync(SudokuStateKey, BoardSerializer.SerializeToJson(board, timer?.SpanToShow, GameStateVersion.Current));
    }

    private async Task Load()
    {
        if (utilitiesModule == null) return;

        var jsonState = await utilitiesModule.GetSettingAsync<string>(SudokuStateKey);
        if (jsonState != null)
        {
            // Load V2 save
            var loadedBoard = BoardSerializer.DeserializeFromJson(jsonState, out var loadedTimer);
            if (loadedBoard != null && loadedTimer.HasValue)
            {
                board = loadedBoard;
                timer?.SetTime(loadedTimer.Value);
                InvalidCells = board.GetInvalidCells(Validator);
            }
            else
            {
                // Load V1 save
                var v1board = BoardSerializer.DeserializeFromJson(jsonState);
                if (v1board != null)
                {
                    board = v1board;
                    InvalidCells = board.GetInvalidCells(Validator);
                }

                var jsonTimer = await utilitiesModule.GetSettingAsync<string>(TimerStateKey);
                if (timer != null && jsonTimer != null && TimeSpan.TryParse(jsonTimer, out var loadedTimerOnly))
                {
                    timer.SetTime(loadedTimerOnly);
                }
            }
        }
    }

    protected void CreateNewBoard()
    {
        success = false;
        board = new Board(Solver, new RandomOptionOrder<int>(), Blanker, TargetBlanks, AttemptsToRemove);
    }

    private async Task HandleKeyDown(KeyboardEventArgs args, int row, int column)
    {
        if (args.AltKey || args.ShiftKey || args.MetaKey || args.CtrlKey) return;
        switch (args.Code)
        {
            case KeyCodes.ArrowLeft:
                await BlurAsync(row, column);
                await FocusAsync(row, WrapAroundBetweenEdges(column, -1));
                return;
            case KeyCodes.ArrowRight:
                await BlurAsync(row, column);
                await FocusAsync(row, WrapAroundBetweenEdges(column, +1));
                return;
            case KeyCodes.ArrowUp:
                await BlurAsync(row, column);
                await FocusAsync(WrapAroundBetweenEdges(row, -1), column);
                return;
            case KeyCodes.ArrowDown:
                await BlurAsync(row, column);
                await FocusAsync(WrapAroundBetweenEdges(row, +1), column);
                return;
            case KeyCodes.CapsLock:
            case KeyCodes.Tab:
                return;
            case KeyCodes.Enter:
                await BlurAsync(row, column);
                column++;
                if (column > 9)
                {
                    column -= 9;
                    row++;
                    if (row > 9)
                    {
                        row -= 9;
                    }
                }
                await FocusAsync(row, column);
                return;
        }

        if (board.IsPredefined((row - 1, column - 1))) return;

        await ProcessNonNavigatingInputAsync(row - 1, column - 1, args.Key);
    }

    private int WrapAroundBetweenEdges([Range(1, Board.BoardSize)] int cellPositionOnAxis, [Range(-1, 1)] int positionChange)
    {
        // Replaces previously used ternary operators with calculation using modulo.
        // Note that adding Board.BoardSize before using modulo allows wrapping around position from 1 to 9
        return ((Board.BoardSize + cellPositionOnAxis - 1 + positionChange) % Board.BoardSize) + 1;
    }

    private async Task ProcessNonNavigatingInputAsync(int row, int column, string key)
    {
        if (int.TryParse(key, out var number) && number >= 1 && number <= 9)
        {
            UpdateCellAsync(row , column, cells[row, column], number);
            CheckForWinCondition();
        }
        else
        {
            await cells[row, column].SetParametersAsync(ParameterView.FromDictionary(new Dictionary<string, object?> { { nameof(Cell.Value), string.Empty } }));
            board.ClearCell((row, column));
            InvalidCells.Remove((row, column));
            InvalidCells.RemoveAll(cell => Validator.IsValid(board, cell));
        }
    }

    private void UpdateCellAsync(int row, int column, Cell currentCell, int number)
    {
        board.FillCell((row, column), number);
        currentCell.OnChange(number.ToString());
        InvalidCells = board.GetInvalidCells(Validator);
    }

    private void CheckForWinCondition()
    {
        if (board.EmptyCells.Count == 0 && Validator.IsValidBoard(board))
        {
            success = true;
            timePassed = timer?.SpanToShow;
        }
    }

    private async Task FocusAsync(int row, int column)
    {
        if (module is null) return;
        await module.InvokeVoidAsync("focusCell", row, column);
    }

    private async Task BlurAsync(int row, int column)
    {
        if (module is null) return;
        await module.InvokeVoidAsync("blurCell", row, column);
    }

    private async Task LoadResourcesAsync()
    {
        await Localization.InitializeAsync(LanguageSelect.Culture);
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        MainLayout.OnStateChanging -= LoadResourcesAsync;
        if (module is null) return;
        await module.DisposeAsync();
    }
}
