@if (ReadOnly)
{
    <input class="text-center sudoku-input input-readonly" style="background-color: white; align-content: center" readonly="readonly" value="@Value" 
        @onkeydown="OnKeyDown" />
}
else
{
    <InputText Value="@Value" ValueChanged="OnChange" ValueExpression="() => Value" @onfocus="OnFocus"
        class="@($"{HighlightColor ?? string.Empty} text-center sudoku-input input-editable")"
        type="@type"
        @onblur="OnBlur"
        @onkeydown="OnKeyDown" />
}

@code {
    [Parameter]
    public string? HighlightColor { get; set; } = null;

    [Parameter]
    public EventCallback<ChangeEventArgs> OnValueChanged { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string Value { get; set; } = string.Empty;

    private string type = "text";

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    [Parameter]
    public bool SwitchTypeOnFocus { get; set; } = true;

    private async Task OnChange(string value)
    {
        if (value is string text && int.TryParse(text, out var number) && number >= 1 && number <= 9)
        {
            await OnValueChanged.InvokeAsync(new ChangeEventArgs { Value = number });
        }
        else
        {
            Value = string.Empty;
            await OnValueChanged.InvokeAsync(new ChangeEventArgs { Value = null });
        }
        HighlightColor = null;
    }

    private async Task OnBlur()
    {
        await OnChange(Value);
        if (!SwitchTypeOnFocus) return;
        type = "text";
    }

    private async void OnFocus()
    {
        if (!SwitchTypeOnFocus) return;
        type = "number";
    }
}
