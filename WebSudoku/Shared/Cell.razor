@if (ReadOnly)
{
    <input class="text-center sudoku-input sudoku-input-var @AdditionalClass" style="background-color: white; align-content: center" readonly="readonly" value="@Value" />
}
else
{
    <InputText TValue="string" Value="@Value" ValueChanged="v => OnChange(new ChangeEventArgs { Value = v })" ValueExpression="() => Value" class="@($"text-center sudoku-input sudoku-input-var {AdditionalClass}")" style="@($"text-indent: {Indent}px;{(HighlightColor != null ? $"background-color: {HighlightColor}" : string.Empty)}")" />
}

@code {
    [Parameter]
    public string? HighlightColor { get; set; } = null;

    [Parameter]
    public EventCallback<ChangeEventArgs> OnValueChanged { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public bool IsMobileDevice { get; set; }

    protected string AdditionalClass => ReadOnly ? "input-readonly" : "input-editable";

    protected string InputType => ReadOnly ? "text" : "number";

    protected int Indent = 0;

    private async Task OnChange(ChangeEventArgs args)
    {
        if (args.Value is string text && int.TryParse(text, out var number) && number >= 1 && number <= 9)
        {
            await OnValueChanged.InvokeAsync(new ChangeEventArgs { Value = number });
        }
        else
        {
            Value = string.Empty;
            await OnValueChanged.InvokeAsync(new ChangeEventArgs { Value = null });
        }
        HighlightColor = null;
        StateHasChanged();
    }
}
