@if (ReadOnly)
{
    <input class="text-center sudoku-input input-readonly" style="background-color: white; align-content: center" readonly="readonly" value="@Value" 
        @onkeydown="OnKeyDown" />
}
else
{
    <InputText Value="@Value" ValueChanged="OnChange" ValueExpression="() => Value" @onfocus="OnFocus"
        class="text-center sudoku-input input-editable"
        type="@type"
        style="@(HighlightColor != null ? $"background-color: {HighlightColor}" : string.Empty)"
        @onblur="OnBlur"
        @onkeydown="OnKeyDown" />
}

@code {
    [Parameter]
    public string? HighlightColor { get; set; } = null;

    [Parameter]
    public EventCallback<ChangeEventArgs> OnValueChanged { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string Value { get; set; } = string.Empty;

    private string type = "text";

    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }

    private async Task OnChange(string value)
    {
        if (value is string text && int.TryParse(text, out var number) && number >= 1 && number <= 9)
        {
            await OnValueChanged.InvokeAsync(new ChangeEventArgs { Value = number });
        }
        else
        {
            Value = string.Empty;
            await OnValueChanged.InvokeAsync(new ChangeEventArgs { Value = null });
        }
        HighlightColor = null;
        StateHasChanged();
    }

    private async Task OnBlur()
    {
        await OnChange(Value);
        type = "text";
    }

    private void OnFocus()
    {
        type = "number";
    }
}
