@using apb97.github.io.WebSudoku.Services

@inherits LocalizableComponent<LanguageSelect>

@inject IJSRuntime JS

<UtilitiesProvider @ref="utilitiesModule" />

@if (ShouldRender())
{
    <label for="language" class="text-white">
        @Loc["Select your locale"]:
    </label>
    <InputSelect id="language" style="background-color: transparent; border: none; color: white;" TValue="string" DisplayName="Language" Value="@Culture" ValueChanged="UpdateLocalizationAsync" ValueExpression="() => Culture">
        @foreach (var culture in supportedCultures)
        {
            <option value="@culture.Value" class="@(culture.Value == Culture ? "current" : null)">@culture.Key</option>
        }
    </InputSelect>
}

@code
{
    private static string? currentCulture;

    public string? Culture { get => currentCulture; private set => currentCulture = value; }

    private IJSObjectReference? utilitiesModule;

    private readonly static IReadOnlyDictionary<string, string> supportedCultures = new Dictionary<string, string>
    {
        { "English", "en-US" },
        { "Polski", "pl-PL" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (utilitiesModule is null) return;

        await UpdateLocalizationAsync(await utilitiesModule.GetSettingAsync<string>("BlazorCulture"));
    }

    private async Task UpdateLocalizationAsync(string value)
    {
        if (Culture == value) return;
        Culture = value ?? "en-US";
        await Loc.InitializeAsync(value);

        await Layout.NotifyStateChanged();

        if (utilitiesModule is null) return;
        await utilitiesModule.SetSettingAsync("BlazorCulture", value);
    }
}